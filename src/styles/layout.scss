@import "mixins";
@import "variables";

/********************************** Global ***********************************/

html {
  // Required for using % dimensions on children.
  width: 100%;
  height: 100%;
}

// Normalise whitespace.
*, *::before, *::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
ul, ol, dl {
  @include sf-space-out-vertical($sf-space / 2);
}
dl dt:not(:first-of-type) {
  margin-top: $sf-space;
}

body {
  /**
   * Layout.
   */
  // Limit the body width and center it horizontally.
  max-width: $sf-body-max-width;
  margin-left: auto;
  margin-right: auto;
  // Stretch vertically to fill the viewport.
  min-height: 100%;
  min-height: 100vh;

  /**
   * Inner layout.
   */
  // This allows us to push the footer downwards.
  display: flex;
  flex-direction: column;
  // These vital properties are implicit, but we duplicate them to avoid
  // accidental overrides by the user.
  align-items: stretch;
  justify-content: flex-start;
}

/********************************** Layout ***********************************/

// Spaced-out container for typographically meaningful elements, like
// paragraphs, that require surrounding whitespace.
.container {
  padding: $sf-space;
  @include sf-space-out-vertical;
}

/**
 * Flex container rules.
 */

// Axis directions.
$-sf-directions: row, col;
// Main-axis variants.
$-sf-main: start, center, end, around, between;
// Cross-axis variants.
$-sf-cross: start, center, end, stretch;

@function sf-container-class($prefix, $direction, $main, $cross) {
  @return '.#{$prefix}#{$direction}-#{$main}-#{$cross}';
}

@function sf-each-for-direction($direction, $prefix: '') {
  $selector: ();
  @each $main in $-sf-main {
    @each $cross in $-sf-cross {
      $class: sf-container-class($prefix, $direction, $main, $cross);
      $selector: append($selector, $class, 'comma');
    }
  }
  @return $selector;
}

@function sf-each-container($prefix: '') {
  $selector: ();
  @each $direction in $-sf-directions {
    $selector: append($selector, sf-each-for-direction($direction, $prefix), 'comma');
  }
  @return $selector;
}

@function sf-each-for-main($main, $prefix: '') {
  $selector: ();
  @each $direction in $-sf-directions {
    @each $cross in $-sf-cross {
      $class: sf-container-class($prefix, $direction, $main, $cross);
      $selector: append($selector, $class, 'comma');
    }
  }
  @return $selector;
}

@function sf-each-for-cross($cross, $prefix: '') {
  $selector: ();
  @each $direction in $-sf-directions {
    @each $main in $-sf-main {
      $class: sf-container-class($prefix, $direction, $main, $cross);
      $selector: append($selector, $class, 'comma');
    }
  }
  @return $selector;
}

@mixin sf-container-rules($prefix: '') {
  // Base directions.
  #{sf-each-container($prefix)}          {display: flex}
  #{sf-each-for-direction(row, $prefix)} {flex-direction: row}
  #{sf-each-for-direction(col, $prefix)} {flex-direction: column}

  // Main axis alignment variants.
  #{sf-each-for-main(start, $prefix)}    {justify-content: flex-start}
  #{sf-each-for-main(center, $prefix)}   {justify-content: center}
  #{sf-each-for-main(end, $prefix)}      {justify-content: flex-end}
  #{sf-each-for-main(around, $prefix)}   {justify-content: space-around}
  #{sf-each-for-main(between, $prefix)}  {justify-content: space-between}

  // Cross axis alignment variants.
  #{sf-each-for-cross(start, $prefix)}   {align-items: flex-start}
  #{sf-each-for-cross(center, $prefix)}  {align-items: center}
  #{sf-each-for-cross(end, $prefix)}     {align-items: flex-end}
  #{sf-each-for-cross(stretch, $prefix)} {align-items: stretch}

  // Child wrapping.
  .#{$prefix}wrap   {flex-wrap: wrap}
  .#{$prefix}nowrap {flex-wrap: nowrap}
}

@include sf-container-rules;
@include sf-eq-sm {@include sf-container-rules(sm-);}
@include sf-gt-sm {@include sf-container-rules(md-);}
@include sf-gt-md {@include sf-container-rules(lg-);}

/**
 * Flex child rules.
 */

@mixin sf-child-rules($prefix: '') {
  // Alignment.
  .#{$prefix}self-start   {align-self: flex-start}
  .#{$prefix}self-center  {align-self: center}
  .#{$prefix}self-end     {align-self: flex-end}
  .#{$prefix}self-stretch {align-self: stretch}

  // Negation.
  .#{$prefix}flex-none {flex: none}

  // .flex-N {flex: N} where 1 <= N <= 12
  $i: 1;
  @while $i <= 12 {
    .#{$prefix}flex-#{$i} {flex: $i}
    $i: $i + 1;
  }

  // .order-N {order: N} where -1 <= N <= 3
  $i: -1;
  @while $i <= 3 {
    .#{$prefix}order-#{$i} {order: $i}
    $i: $i + 1;
  }
}

@include sf-child-rules;
@include sf-eq-sm {@include sf-child-rules(sm-);}
@include sf-gt-sm {@include sf-child-rules(md-);}
@include sf-gt-md {@include sf-child-rules(lg-);}

/*********************************** Grid ************************************/

@mixin sf-grid-rules($prefix: '') {
  $name: '.#{$prefix}grid';

  #{$name}-1, #{$name}-2, #{$name}-3, #{$name}-4, #{$name}-5, #{$name}-6 {
    display: flex;
    flex-wrap: wrap;

    // Prevent children from unexpectedly stretching or shrinking.
    > * {
      flex-grow: 0;
      flex-shrink: 0;
    }
  }

  #{$name}-1 > * {flex-basis: 100%}
  #{$name}-2 > * {flex-basis: 50%}
  #{$name}-3 > * {flex-basis: calc(1/3 * 100%)}
  #{$name}-4 > * {flex-basis: 25%}
  #{$name}-5 > * {flex-basis: 20%}
  #{$name}-6 > * {flex-basis: calc(1/6 * 100%)}
}

@include sf-grid-rules;
@include sf-eq-sm {@include sf-grid-rules(sm-);}
@include sf-gt-sm {@include sf-grid-rules(md-);}
@include sf-gt-md {@include sf-grid-rules(lg-);}

// Stylebox

/**
 * overflow
 */

.overflow-x-scroll {
  overflow-x: auto;
  overflow-y: hidden;
}

.overflow-y-scroll {
  overflow-x: hidden;
  overflow-y: auto;
}

/**
 * text-overflow
 */

.text-ellipsis {
  text-overflow: ellipsis;
  @extend .wspace-nowrap;
  @extend .overflow-hidden;
}

/**
 * geometry
 */

@mixin sb-height-percentage-trick($height-percentage) {
  &::before {
    content: '';
    display: block;
    width: 100%;
    height: auto;
    padding-bottom: $height-percentage;
  }

  flex-shrink: 0;
}

.square {
  @include sb-height-percentage-trick(100%);
}

.circle {
  @include sb-height-percentage-trick(100%);
  border-radius: 50%;
}

/**
 * background
 */

.bg-cover {
  background-repeat: no-repeat;
  background-position: 50% 50%;
  background-size: cover;
}

.bg-contain {
  background-repeat: no-repeat;
  background-position: 50% 50%;
  background-size: contain;
}

/**
 * layout
 */

.stretch-to-viewport {
  min-height: 100vh;
  @extend .col-start-stretch;
}

/**
 * misc
 */

.block-100p {
  @extend .block;
  @extend .width-100p;
}

/**
 * flexbox
 */

@mixin sb-row { display: flex; flex-direction: row; }
@mixin sb-col { display: flex; flex-direction: column; }

@mixin sb-main-start   { justify-content: flex-start; }
@mixin sb-main-center  { justify-content: center; }
@mixin sb-main-end     { justify-content: flex-end; }
@mixin sb-main-around  { justify-content: space-around; }
@mixin sb-main-between { justify-content: space-between; }

@mixin sb-cross-start   { align-items: flex-start; }
@mixin sb-cross-center  { align-items: center; }
@mixin sb-cross-end     { align-items: flex-end; }
@mixin sb-cross-stretch { align-items: stretch; }

.row-start-start     { @include sb-row; @include sb-main-start; @include sb-cross-start; }
.row-start-center    { @include sb-row; @include sb-main-start; @include sb-cross-center; }
.row-start-end       { @include sb-row; @include sb-main-start; @include sb-cross-end; }
.row-start-stretch   { @include sb-row; @include sb-main-start; @include sb-cross-stretch; }

.row-center-start    { @include sb-row; @include sb-main-center; @include sb-cross-start; }
.row-center-center   { @include sb-row; @include sb-main-center; @include sb-cross-center; }
.row-center-end      { @include sb-row; @include sb-main-center; @include sb-cross-end; }
.row-center-stretch  { @include sb-row; @include sb-main-center; @include sb-cross-stretch; }

.row-end-start       { @include sb-row; @include sb-main-end; @include sb-cross-start; }
.row-end-center      { @include sb-row; @include sb-main-end; @include sb-cross-center; }
.row-end-end         { @include sb-row; @include sb-main-end; @include sb-cross-end; }
.row-end-stretch     { @include sb-row; @include sb-main-end; @include sb-cross-stretch; }

.row-around-start    { @include sb-row; @include sb-main-around; @include sb-cross-start; }
.row-around-center   { @include sb-row; @include sb-main-around; @include sb-cross-center; }
.row-around-end      { @include sb-row; @include sb-main-around; @include sb-cross-end; }
.row-around-stretch  { @include sb-row; @include sb-main-around; @include sb-cross-stretch; }

.row-between-start   { @include sb-row; @include sb-main-between; @include sb-cross-start; }
.row-between-center  { @include sb-row; @include sb-main-between; @include sb-cross-center; }
.row-between-end     { @include sb-row; @include sb-main-between; @include sb-cross-end; }
.row-between-stretch { @include sb-row; @include sb-main-between; @include sb-cross-stretch; }

.col-start-start     { @include sb-col; @include sb-main-start; @include sb-cross-start; }
.col-start-center    { @include sb-col; @include sb-main-start; @include sb-cross-center; }
.col-start-end       { @include sb-col; @include sb-main-start; @include sb-cross-end; }
.col-start-stretch   { @include sb-col; @include sb-main-start; @include sb-cross-stretch; }

.col-center-start    { @include sb-col; @include sb-main-center; @include sb-cross-start; }
.col-center-center   { @include sb-col; @include sb-main-center; @include sb-cross-center; }
.col-center-end      { @include sb-col; @include sb-main-center; @include sb-cross-end; }
.col-center-stretch  { @include sb-col; @include sb-main-center; @include sb-cross-stretch; }

.col-end-start       { @include sb-col; @include sb-main-end; @include sb-cross-start; }
.col-end-center      { @include sb-col; @include sb-main-end; @include sb-cross-center; }
.col-end-end         { @include sb-col; @include sb-main-end; @include sb-cross-end; }
.col-end-stretch     { @include sb-col; @include sb-main-end; @include sb-cross-stretch; }

.col-around-start    { @include sb-col; @include sb-main-around; @include sb-cross-start; }
.col-around-center   { @include sb-col; @include sb-main-around; @include sb-cross-center; }
.col-around-end      { @include sb-col; @include sb-main-around; @include sb-cross-end; }
.col-around-stretch  { @include sb-col; @include sb-main-around; @include sb-cross-stretch; }

.col-between-start   { @include sb-col; @include sb-main-between; @include sb-cross-start; }
.col-between-center  { @include sb-col; @include sb-main-between; @include sb-cross-center; }
.col-between-end     { @include sb-col; @include sb-main-between; @include sb-cross-end; }
.col-between-stretch { @include sb-col; @include sb-main-between; @include sb-cross-stretch; }

/**
 * position
 */

@mixin sb-position-t        { top: 0; }
@mixin sb-position-t-l      { top: 0; left: 0; }
@mixin sb-position-t-r      { top: 0; right: 0; }
@mixin sb-position-b        { bottom: 0; }
@mixin sb-position-b-l      { bottom: 0; left: 0; }
@mixin sb-position-b-r      { bottom: 0; right: 0; }
@mixin sb-position-l        { left: 0; }
@mixin sb-position-r        { right: 0; }
@mixin sb-position-fit      { top: 0; right: 0; bottom: 0; left: 0; }
@mixin sb-position-center-x { transform: translateX(-50%); left: 50%; }
@mixin sb-position-center-y { transform: translateY(-50%); top: 50%; }
@mixin sb-position-center   { transform: translateY(-50%) translateX(-50%); top: 50%; left: 50%;; }

.abs          { position: absolute; }
.abs-t        { position: absolute; @include sb-position-t; }
.abs-t-l      { position: absolute; @include sb-position-t-l; }
.abs-t-r      { position: absolute; @include sb-position-t-r; }
.abs-b        { position: absolute; @include sb-position-b; }
.abs-b-l      { position: absolute; @include sb-position-b-l; }
.abs-b-r      { position: absolute; @include sb-position-b-r; }
.abs-l        { position: absolute; @include sb-position-l; }
.abs-r        { position: absolute; @include sb-position-r; }
.abs-fit      { position: absolute; @include sb-position-fit; }
.abs-center   { position: absolute; @include sb-position-center; }
.abs-center-x { position: absolute; @include sb-position-center-x; }
.abs-center-y { position: absolute; @include sb-position-center-y; }

.fix          { position: fixed; }
.fix-t        { position: fixed; @include sb-position-t; }
.fix-t-l      { position: fixed; @include sb-position-t-l; }
.fix-t-r      { position: fixed; @include sb-position-t-r; }
.fix-b        { position: fixed; @include sb-position-b; }
.fix-b-l      { position: fixed; @include sb-position-b-l; }
.fix-b-r      { position: fixed; @include sb-position-b-r; }
.fix-l        { position: fixed; @include sb-position-l; }
.fix-r        { position: fixed; @include sb-position-r; }
.fix-fit      { position: fixed; @include sb-position-fit; }
.fix-center   { position: fixed; @include sb-position-center; }
.fix-center-x { position: fixed; @include sb-position-center-x; }
.fix-center-y { position: fixed; @include sb-position-center-y; }

/**
 * border-radius
 */

.rounded     { border-radius: $sb-radius; }
.rounded-t   { border-radius: $sb-radius $sb-radius 0 0; }
.rounded-t-l { border-radius: $sb-radius 0 0 0; }
.rounded-t-r { border-radius: 0 $sb-radius 0 0; }
.rounded-b   { border-radius: 0 0 $sb-radius $sb-radius; }
.rounded-b-l { border-radius: 0 0 0 $sb-radius; }
.rounded-b-r { border-radius: 0 0 $sb-radius 0; }
.rounded-l   { border-radius: $sb-radius 0 0 $sb-radius; }
.rounded-r   { border-radius: 0 $sb-radius $sb-radius 0; }

/**
 * spacing
 */

@mixin sb-space($min, $max, $step: 0.25) {
  $val: $min;

  @while $val <= $max {
    @include sb-gaps($val);
    @include sb-margin($val);
    @include sb-padding($val);

    $val: $val + $step;
  }
}

@mixin sb-margin($val) {
  $size: sb-str-replace($val + '', '.', 'x');

  .margin-#{$size}   { margin:        #{$val}rem; }
  .margin-t-#{$size} { margin-top:    #{$val}rem; }
  .margin-r-#{$size} { margin-right:  #{$val}rem; }
  .margin-b-#{$size} { margin-bottom: #{$val}rem; }
  .margin-l-#{$size} { margin-left:   #{$val}rem; }
  .margin-v-#{$size} { margin-top:    #{$val}rem; margin-bottom: #{$val}rem; }
  .margin-h-#{$size} { margin-left:   #{$val}rem; margin-right:  #{$val}rem; }
}

@mixin sb-padding($val) {
  $size: sb-str-replace($val + '', '.', 'x');

  .padding-#{$size}   { padding:        #{$val}rem; }
  .padding-t-#{$size} { padding-top:    #{$val}rem; }
  .padding-r-#{$size} { padding-right:  #{$val}rem; }
  .padding-b-#{$size} { padding-bottom: #{$val}rem; }
  .padding-l-#{$size} { padding-left:   #{$val}rem; }
  .padding-v-#{$size} { padding-top:    #{$val}rem; padding-bottom: #{$val}rem; }
  .padding-h-#{$size} { padding-left:   #{$val}rem; padding-right:  #{$val}rem; }
}

@mixin sb-gaps($val) {
  $size: sb-str-replace($val + '', '.', 'x');

  .gaps-v-#{$size} > :not(:last-child):not(:only-child):not(.no-gaps-v) {
    margin-bottom: #{$val}rem;
  }

  .gaps-h-#{$size} > :not(:last-child):not(:only-child):not(.no-gaps-h) {
    margin-right: #{$val}rem;
  }
}

@include sb-space($sb-space-start, $sb-space-end, $sb-space-step);

/**
 * edge
 */

@mixin sb-edge($name, $color, $inset: null) {
  .edge-#{sb-direction($inset)}-#{$name}   { box-shadow: #{sb-shadow-around($inset, $color)}; }
  .edge-#{sb-direction($inset)}-#{$name}-t { box-shadow: #{sb-shadow-top($inset, $color)}; }
  .edge-#{sb-direction($inset)}-#{$name}-b { box-shadow: #{sb-shadow-bottom($inset, $color)}; }
  .edge-#{sb-direction($inset)}-#{$name}-l { box-shadow: #{sb-shadow-left($inset, $color)}; }
  .edge-#{sb-direction($inset)}-#{$name}-r { box-shadow: #{sb-shadow-right($inset, $color)}; }
  .edge-#{sb-direction($inset)}-#{$name}-v { box-shadow: #{sb-shadow-top($inset, $color)},
  #{sb-shadow-bottom($inset, $color)}; }
  .edge-#{sb-direction($inset)}-#{$name}-h { box-shadow: #{sb-shadow-left($inset, $color)},
  #{sb-shadow-right($inset, $color)}; }
}

/**
 * position
 */

.relative { position: relative; }
.absolute { position: absolute; }
.static   { position: static; }
.fixed    { position: fixed; }

/**
 * display
 */

.block        { display: block; }
.inline       { display: inline; }
.inline-block { display: inline-block; }
.inline-table { display: inline-table; }
.table        { display: table; }
.table-row    { display: table-row; }
.table-column { display: table-column; }
.table-cell   { display: table-cell; }
.flex         { display: flex; }

/**
 * float
 */

.float-none  { float: none; }
.float-left  { float: left; }
.float-right { float: right; }

/**
 * clear
 */

.clear-none  { clear: none; }
.clear-both  { clear: both; }
.clear-left  { clear: left; }
.clear-right { clear: right; }

/**
 * visibility
 */

.visibility-hidden   { visibility: hidden; }
.visibility-visible  { visibility: visible; }
.visibility-collapse { visibility: collapse; }

/**
 * tables
 */

.table-fixed { table-layout: fixed; }

/**
 * vertical-align
 */

.valign-top      { vertical-align: top; }
.valign-middle   { vertical-align: middle; }
.valign-bottom   { vertical-align: bottom; }
.valign-baseline { vertical-align: baseline; }

/**
 * text-align
 */

.text-left    { text-align: left; }
.text-right   { text-align: right; }
.text-center  { text-align: center; }
.text-justify { text-align: justify; }

/**
 * text-decoration
 */

.text-decoration-none { text-decoration: none; }
.text-overline        { text-decoration: overline; }
.text-underline       { text-decoration: underline; }
.text-line-through    { text-decoration: line-through; }

/**
 * text-transform
 */

.text-transform-none { text-transform: none; }
.text-uppercase      { text-transform: uppercase; }
.text-lowercase      { text-transform: lowercase; }
.text-capitalize     { text-transform: capitalize; }

/**
 * font-weight
 */

.weight-normal  { font-weight: normal; }
.weight-bold    { font-weight: bold; }
.weight-bolder  { font-weight: bolder; }
.weight-lighter { font-weight: lighter; }

/**
 * font-style
 */

.font-style-normal { font-style: normal; }

/**
 * white-space
 */

.wspace-normal { white-space: normal; }
.wspace-nowrap { white-space: nowrap; }

/**
 * width and height
 */

.width-25p    { width: 25%; }
.width-50p    { width: 50%; }
.width-75p    { width: 75%; }
.width-100p   { width: 100%; }
.width-100vw  { width: 100vw; }
.height-100p  { height: 100%; }
.height-100vh { height: 100vh; }

/**
 * cursor
 */

.cursor-pointer      { cursor: pointer; }
.pointer-events-none { pointer-events: none; }

/**
 * flexbox
 */

.flex-1           { flex: 1; }
.flex-wrap        { flex-wrap: wrap; }
.flex-nowrap      { flex-wrap: nowrap; }
.flex-shrink-none { flex-shrink: 0; }

/**
 * overflow
 */

.overflow-hidden { overflow: hidden; }