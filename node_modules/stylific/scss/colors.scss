/**
 * Using ideas from:
 * https://material.angularjs.org/latest/#/Theming/01_introduction
 *
 * A site chooses three colours for its palette, representing intentions:
 *   primary
 *   accent
 *   warn
 *
 * Each colour is defined as a map with a string name and three hues:
 *   name          <string>
 *   default
 *   active        :hover, :active
 *   selected      .active
 *
 * Given a colour with the name C, we expose two global classes:
 *   .theme-C        {background-color} and {color}
 *   .theme-text-C   just {color}
 *
 * We also create an interactive version of each colour theme, available for
 * certain selectors. The interactive version has slightly different hues for
 * the 'active' and 'selected' states.
 */

@each $color-map in $sf-color-maps {
  $name: map-get($color-map, name);
  $default: map-get($color-map, default);
  $selected: map-get($color-map, selected);

  // Text theme.
  .theme-text-#{$name} {
    color: sf-sensible-text-color($default);
    svg {fill: $default}
  }

  // Full theme.
  .theme-#{$name} {
    background-color: $default;
    color: sf-contrasting-color($default);
    svg {fill: sf-contrasting-color($default)}
  }
}

// Treat each of these elements as interactive (unless [disabled]).
.interactive              {@include sf-register-interactive-selector;}
a[href]                   {@include sf-register-interactive-selector;}
input                     {@include sf-register-interactive-selector;}
textarea                  {@include sf-register-interactive-selector;}
[contenteditable]         {@include sf-register-interactive-selector;}
[data-sf-toggle]          {@include sf-register-interactive-selector;}
[data-sf-toggle-siblings] {@include sf-register-interactive-selector;}
[data-sf-toggle-id]       {@include sf-register-interactive-selector;}

html {
  background-color: darken($sf-color-background, 5%);
  color: $sf-color-text;
}

body {
  background-color: $sf-color-background;
}

// Normalise link colours.
a {
  color: $sf-color-link;
}

@each $color-map in $sf-color-maps {
  $name: map-get($color-map, name);
  .theme-text-#{$name} a, .theme-#{$name} a {
    color: inherit;
  }
}

// Default monospace background.
tt, code, kbd, pre, samp {
  background-color: rgba(map-get($sf-color-map-primary, default), 0.05);
}
